//////////////////////////fcfs
#include<stdio.h>
int main(){
    int i,j,temp,n,at[50],bt[50],ct[50],tat[50],wt[50],total_wt,total_tat;
    printf("enter the number of processes\n");
    scanf("%d",&n);
    printf("enter the arrival time and burst time for each process\n");
    for(i=0;i<n;i++){
        printf("arrival time and burst time of process %d - ",i+1);
        scanf("%d %d",&at[i],&bt[i]);
    }
    //now sort in terms of arrival times
    for(i=0;i<n-1;i++){
        for(j=0;j<n-i-1;j++){
            if(at[i]>at[i+1]){
                //swap ati,ati+1
                temp=at[i];
                at[i]=at[i+1];
                at[i+1]=temp;
                //also swap bt 
                temp=bt[i];
                bt[i]=bt[i+1];
                bt[i+1]=temp;
            }
        }
    }
    ct[0]=bt[0];
    for(i=1;i<n;i++){
        ct[i]=ct[i-1]+bt[i];
    }
    for(i=0;i<n;i++){
        tat[i]=ct[i]-at[i];
    }
    wt[0]=0;
    for(i=1;i<n;i++){
        wt[i]=tat[i]-bt[i];
    }
    printf("process\tarrival time\tburst time\tcomp time\twait time\tta time\n");
	for(int i=0;i<n;i++){
		printf("%d\t",i+1);
		printf("%d\t",at[i]);
		printf("%d\t",bt[i]);
		printf("%d\t",ct[i]);
		printf("%d\t",wt[i]);
		printf("%d\n",tat[i]);
	}
	for(int i=0;i<n;i++){
		total_wt+=wt[i];
		total_tat+=tat[i];
	}
	float w = (float)total_wt/(float)n;
	float t = (float)total_tat/(float)n;
	printf("average waiting time: %f",w);
	printf("\naverage turnaround time: %f",t);
	return 0;
}
sjf//////////
#include<stdio.h>
int main(){
	int n,t,ct,at[10],bt[10],wt[10],tat[10],temp[10],total_wt=0,total_tat=0;
	printf("enter no of process: ");
	scanf("%d",&n);
	printf("enter arrival and burst time: \n");
	for(int i=0;i<n;i++){
		scanf("%d",&at[i]);
		scanf("%d",&bt[i]);
		temp[i]=bt[i];
	}
	int count=0;
	bt[9]=9999;
	for(t=0;count!=n;){
		int small=9;
		for(int i=0;i<n;i++){
			if(at[i]<=t && bt[i]<bt[small] && bt[i]>0){
				small=i;
			}
		}
		bt[small]=0;
		t+=temp[small];
		ct=t;
		tat[small]=ct-at[small];
		wt[small]=tat[small]-temp[small];
		count++;
	}
	printf("process\tarrival time\tburst time\twait time\tta time\n");
	for(int i=0;i<n;i++){
		printf("%d\t",i+1);
		printf("%d\t",at[i]);
		printf("%d\t",temp[i]);
		printf("%d\t",wt[i]);
		printf("%d\n",tat[i]);
	}
	for(int i=0;i<n;i++){
		total_wt+=wt[i];
		total_tat+=tat[i];
	}
	float w = (float)total_wt/(float)n;
	float u = (float)total_tat/(float)n;
	printf("average waiting time: %f",w);
	printf("\naverage turnaround time: %f",u);
	return 0;
}
//////////srtf//////
#include<stdio.h>

int main()

{

 int at[10],bt[10],rt[10],endTime,i,smallest;

 int remain=0,n,time,sum_wait=0,sum_turnaround=0;

 printf("Enter no of Processes : ");

 scanf("%d",&n);

 for(i=0;i<n;i++)

 {

 printf("Enter arrival time for Process P%d : ",i+1);

 scanf("%d",&at[i]);

 printf("Enter burst time for Process P%d : ",i+1);

 scanf("%d",&bt[i]);

 rt[i]=bt[i];

 }

 printf("\n\nProcess\t|Turnaround Time| Waiting Time\n\n");

 rt[9]=9999;

 for(time=0;remain!=n;time++)

 {

 smallest=9;

 for(i=0;i<n;i++)

 {

 if(at[i]<=time && rt[i]<rt[smallest] && rt[i]>0)

 {

 smallest=i;

 }

 }

 rt[smallest]--;

 if(rt[smallest]==0)

 {

 remain++;

 endTime=time+1;

 printf("\nP[%d]\t|\t%d\t|\t%d",smallest+1,endTime-at[smallest],endTime-bt[smallest]-at[smallest]);

 sum_wait+=endTime-bt[smallest]-at[smallest];

 sum_turnaround+=endTime-at[smallest];

 }

 }

 printf("\n\nAverage waiting time = %f\n",sum_wait*1.0/n);

 printf("Average Turnaround time = %f",sum_turnaround*1.0/5);

 return 0;

}
///////////non preemptive priority
#include<stdio.h>
int main(){
	int n,count=0,smaller,at[10],bt[10],temp[10],wt[10],tat[10],pt[10],ct;
	printf("enter total no of process: ");
	scanf("%d",&n);
	printf("enter arrival time,burst time,priority of process");
	for(int i=0;i<n;i++){
		scanf("%d %d %d",&at[i],&bt[i],&pt[i]);
		temp[i]=bt[i];
	}
	pt[9]=100000;
	for(int t=0;count!=n;){
	    smaller=9;
		for(int i=0;i<n;i++){
			if(pt[i]<pt[smaller] && at[i]<=t && bt[i]>0){
				smaller=i;
			}
		}
		bt[smaller]=0;
		t+=temp[smaller];
		ct=t;
		tat[smaller]=ct-at[smaller];
		wt[smaller]=tat[smaller]-temp[smaller];
		count++;
	}
	int total_wt=0,total_tat=0;
	printf("process\tburst time\tarrival time\tpriority\wait time\tturnaround time\n");
	for(int i=0;i<n;i++){
		printf("%d\t",i+1);
		printf("%d\t",temp[i]);
		printf("%d\t",at[i]);
		printf("%d\t",pt[i]);
		printf("%d\t",wt[i]);
		printf("%d\n",tat[i]);
	}
	
	for(int i=0;i<n;i++){
		total_wt+=wt[i];
		total_tat+=tat[i];
	}
	float s = (float)total_wt/(float)n;
	float u = (float)total_tat/(float)n;
	printf("average wait time: %f",s);
	printf("average turn around time: %f",u);
}
//////////preemptive priority
#include<stdio.h>
int main(){
	int n,count=0,smaller,at[10],bt[10],temp[10],wt[10],tat[10],pt[10],ct;
	printf("enter total no of process: ");
	scanf("%d",&n);
	printf("enter arrival time,burst time,priority of process");
	for(int i=0;i<n;i++){
		scanf("%d %d %d",&at[i],&bt[i],&pt[i]);
		temp[i]=bt[i];
	}
	pt[9]=100000;
	for(int t=0;count!=n;t++){
	    smaller=9;
		for(int i=0;i<n;i++){
			if(pt[i]<pt[smaller] && at[i]<=t && bt[i]>0){
				smaller=i;
			}
		}
		bt[smaller]=bt[smaller]-1;
		if(bt[smaller]==0){
			ct=t+1;
			tat[count]=ct-at[smaller];
			wt[count]=tat[count]-temp[smaller];
			count++;
		}	
	}
	int total_wt=0,total_tat=0;
	printf("process\tburst time\tarrival time\tpriority\wait time\tturnaround time\n");
	for(int i=0;i<n;i++){
		printf("%d\t",i+1);
		printf("%d\t",temp[i]);
		printf("%d\t",at[i]);
		printf("%d\t",pt[i]);
		printf("%d\t",wt[i]);
		printf("%d\n",tat[i]);
	}
	
	for(int i=0;i<n;i++){
		total_wt+=wt[i];
		total_tat+=tat[i];
	}
	float s = (float)total_wt/(float)n;
	float u = (float)total_tat/(float)n;
	printf("average wait time: %f",s);
	printf("average turn around time: %f",u);
}
//////////round robin/////////
#include<stdio.h>  
#include<conio.h>  
void main()  
{  
    int i, N, sum=0,count=0, y, quantum, wt=0, tat=0, at[10], bt[10], temp[10];  
    float avg_wt, avg_tat;  
    printf(" Total number of process in the system: ");  
    scanf("%d", &N);  
    y = N;   
for(i=0; i<N; i++)  
{  
printf("\n Enter the Arrival and Burst time of the Process[%d]\n", i+1);  
printf(" Arrival time is: \t");   
scanf("%d", &at[i]);  
printf(" \nBurst time is: \t");  
scanf("%d", &bt[i]);  
temp[i] = bt[i];  
}  
  
printf("Enter the Time Quantum for the process: \t");  
scanf("%d", &quantum);  

printf("\n Process No \t\t Burst Time \t\t TAT \t\t Waiting Time ");  
for(sum=0, i = 0; y!=0; )  
{  
if(temp[i] <= quantum && temp[i] > 0)   
{  
    sum = sum + temp[i];  
    temp[i] = 0;  
    count=1;  
    }     
    else if(temp[i] > 0)  
    {  
        temp[i] = temp[i] - quantum;  
        sum = sum + quantum;    
    }  
    if(temp[i]==0 && count==1)  
    {  
        y--;   
        printf("\nProcess No[%d] \t\t %d\t\t\t\t %d\t\t\t %d", i+1, bt[i], sum-at[i], sum-at[i]-bt[i]);  
        wt = wt+sum-at[i]-bt[i];  
        tat = tat+sum-at[i];  
        count =0;     
    }  
    if(i==NOP-1)  
    {  
        i=0;  
    }  
    else if(at[i+1]<=sum)  
    {  
        i++;  
    }  
    else  
    {  
        i=0;  
    }  
}    
avg_wt = wt * 1.0/N;  
avg_tat = tat * 1.0/N;  
printf("\n Average Turn Around Time: %f", avg_wt);  
printf("\n Average Waiting Time: %f", avg_tat);  
getch();  
}
/////////bankers algorithm////////
//bankers algorithm for deadlock avoidance and detection
#include <stdio.h>
#include<string.h>
#include<stdlib.h>
int n,m,i,j;
int all[10][10],max[10][10],need[10][10],avail[10],req[10],work[10];
int count=0;
struct process
{
    char process[10];
    int flag;
}p[10];
void input()
{
    printf("\nenter total number of processes :");
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
    printf("\nprocesses : ");
    scanf("%s",p[i].process);
    }
    printf("\nenter the number of resources : ");
    scanf("%d",&m);
    printf("enter allocation matrix : \n");
    for(i=0;i<n;i++)
    {
        for(j=0;j<m;j++)
        {
            scanf("%d",&all[i][j]);
        }
    }
    printf("enter max matrix: \n");
    for(i=0;i<n;i++)
    {
        for(j=0;j<m;j++)
        {
            scanf("%d",&max[i][j]);
        }
    }
    printf("need matrix:\n");
    for(i=0;i<n;i++)
    {
        for(j=0;j<m;j++)
        {
            need[i][j]=max[i][j]-all[i][j];
            printf("%d\t",need[i][j]);
        }
         printf("\n");
    }
    printf("\n enter available :");
    for(i=0;i<m;i++)
    {
        scanf("%d",&avail[i]);
    }

}
void safeseq()
{
    int sseq[10],ss=0,chk=0,chki=0;
    for(j=0;j<m;j++)
    {
        work[j]=avail[j];
    }
   for(i=0;i<n;i++)
   {
       p[i].flag=0;
   }
   while(count!=n)
   {
       for(i=0;i<n;i++)
       {
           chk=0;
           for(j=0;j<m;j++)
           {
               if(p[i].flag==0)
               {
                   if(need[i][j]<=work[j])
                   {
                       chk++;
                   }
                   if(chk==m)
                   {
                       for(j=0;j<m;j++)
                       {
                           work[j]=work[j]+all[i][j];
                           p[i].flag=1;
                       }
                       sseq[ss]=i;
                       ss++;
                       count++;
                   }
               }
           }
       }
   }
       for(i=0;i<n;i++)
       {
           if(p[i].flag==1)
           {
           chki++;
           }
       }
       if(chki>=n)
       {
           printf("System is in safe state\n");
           for(i=0;i<n;i++)
           printf("%d\t",sseq[i]);
       }
       else
       {
           printf("System is not in safe state\n");
       }
   }

void request()
{
    int r;
    printf("enter the process that is requesting :\n");
    scanf("%d",&r);
    printf("enter the requested array:\n");
    for(i=0;i<m;i++)
    {
        scanf("%d",&req[i]);
    }
    for(j=0;j<m;j++)
    {
        if(req[i]<=need[r][j])
        {
            if(req[j]<=avail[j])
            {
                avail[j]=avail[j]-req[j];
                all[r][j]=all[r][j]+req[j];
                need[r][j]=need[r][j]-req[j];
                printf("avail :  %d ",avail[j]);
            }
            printf("\t need : %d\n",need[r][j]);
        }
        else
        {
            printf("process is not in safe state hence req cant be granted\n");
            exit(0);
        }
    }
    printf("request can be granted\n ");
}
void print()
{
    printf("no of processes=%d ",n);
    printf("\n pid \t max \t allo \t need");
    for(i=0;i<n;i++)
    {
	
	 printf("\n %d\t",i);
      for(j=0;j<m;j++)
        printf("%d",max[i][j]);
        printf("\t");
      for(j=0;j<m;j++)
        printf("%d",all[i][j]);
         printf("\t");
      for(j=0;j<m;j++)
        printf("%d",need[i][j]);
            printf("\t");

    }
    printf("\n available ");
    for(i=0;i<m;i++)
    {
        printf("%d",avail[i]);
    }

}

int main() {
    int ch;
    do
    {
        printf("\nmenu:");
        printf("\n1.input : ");
        printf("\n2.safe sequence : ");
        printf("\n3.request : ");
        printf("\n4.print : ");
        printf("\n5.exit : ");
        printf("\nenter choice : ");
        scanf("%d",&ch);
        switch(ch)
        {
             case 1: input();
             break;
             case 2: safeseq();
             break;
             case 3: request();
             break;
             case 4: print();
             break;
             case 5: exit(0);
             break;
        }
    }while(ch!=n);
    return 0;
}
///////file opns
#include<stdio.h>
#include<unistd.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
int main(){
    int n,f,f2;
    char buff[50];
    printf("reading and writing\n");
    f=open("practice.txt",O_RDWR);
    read(f,buff,40);
    write(1,buff,40);
    printf("by using lseek\n");
    lseek(f,10,SEEK_CUR);
    read(f,buff,10);
    write(1,buff,10);
    printf("\n");
    printf("the file is closed\n");
    close(f);
    return 0;
}
#include <stdio.h>
#include <sys/stat.h>
int main() {
struct stat filestat;
const char *filename="example.txt";
if(stat(filename,&filestat)==-1){
    perror("stat");
    return 1;
}
printf("file size in bytes  is %ld\n ",filestat.st_size);
printf("number of links %ld\n",filestat.st_nlink);
printf("file permissions : %o\n",filestat.st_mode & 0777);
printf("owners user id : %d\n",filestat.st_uid);
printf("groups id of user :%d\n",filestat.st_gid);
printf("device id of user is : %ld",filestat.st_dev);
printf("inode number is %ld\n",filestat.st_ino);
printf("last access time is %ld last modification time is %ld , last status change time is %ld",filestat.st_atime,filestat.st_mtime,filestat.st_ctime);
return 0;
}
///////prod consumer
#include <stdio.h>
#include<stdlib.h>
int mutex=1,full=0,empty=3,x=0;

int wait(int s)
{
    return s-1;
}
int signal(int s)
{
    return s+1;
}
void producer()
{
    mutex=wait(mutex);
    full=signal(full);
    empty=wait(empty);
    x++;
    printf("producer produces the item %d\n",x);
    mutex=signal(mutex);
}
void consumer()
{
    mutex=wait(mutex);
    full=wait(full);
    empty=signal(empty);
    printf("consumer consumes the item %d\n",x);
    x--;
    mutex=signal(mutex);
}
int main() {
    int choice;
    void producer();
    void consumer();
    int wait(int);
    int signal(int);
    printf("1. producer \n 2. consumer \n 3.exit \n");
    while(1)
    {
        printf("enter choice: ");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1:
            if((mutex==1)&&(empty!=0))
              producer();
            else
             printf("buffer is full so producer cant produces items\n");
            break;
            case 2:
            if((mutex==1)&&(full!=0))
              consumer();
            else
             printf("buffer is empty so consumer cant consumes items\n");
            break;
            case 3:
             printf("exit from the program\n");
             exit(0);
            break;
        }
    }
     return 0;
}
///////////paging
#include<stdio.h>
#include <stdlib.h>
#define max 50
int main()
{
	int page[max],i,pages,frames,pagesize,offset,pageno;
	int choice=0;
	printf("\nEnter the number of pages in memory : ");
	scanf("%d",&pages);
	printf("\n");
	printf("\nEnter the page size(in kb):");
	scanf("%d",&pagesize);
	printf("\n");
	printf("\nEnter the number of frames in memory :");
	scanf("%d",&frames);
	printf("\n");
	for(i=0;i<pages;i++)
	{
		page[i]=-1;
	}
	printf("\nEnter the page table\n");
	printf("\nEnter frame number as -1 \nif the page is not present in main memory\n");
	printf("\n Page no \t Frame no \n----------\t---------");
	for(i=0;i<pages;i++)
	{
		printf("\n\n%d\t\t",i);
		scanf("%d",&page[i]);
	}
	do
	{
		printf("\nEnter the logical address(page no offset): ");
		scanf("%d%d",&pageno,&offset);
		
		if(page[pageno]==-1 )
		{
		printf("\nThe page is not available in main memory \n");
	    }
	    else
	    {
		   printf("\nThe page is available in main memory \n ");
		   printf("\nThe physical address (the address where our  actual data is stored ),(frame no,offset): %d  %d",page[pageno],offset);
	    }
		printf("\nDo you want to continue \n if yes press 1 \n if no press 0 \n");
		scanf("%d",&choice);
	}while(choice==1);
	return 1;
} 
//////////segmentation
#include<stdio.h>
#define max_processes 10
#define max_segments 10
typedef struct
{
	int baseaddress;
	int limit;
}Segment;
int get_physical_address(Segment segmenttable[max_processes][max_segments],int processno,int segmentno,int offset)
{
if(processno>=0 && processno<max_processes && segmentno>=0 && segmentno<max_segments)
{
	Segment s=segmenttable[processno][segmentno];

if(offset>=0 &&offset<s.limit)
{
	int physicaladdress=s.baseaddress+offset;
		return physicaladdress;
	}
}
return -1;
}

int main()
{
         Segment segmenttable[max_processes][max_segments]={0};
	int numprocesses,numsegments;
	printf("\nenter the num of processes :");
	scanf("%d",&numprocesses);
	printf(" \nenter the num of segments:" );
	scanf("%d",&numsegments);
	printf("\n");
	int i,j;
	for(i=0;i<numprocesses;i++)
	{
		printf("process %d : ",i);
		printf("\n");
		for(j=0;j<numsegments;j++)
		{
			printf("enter the base address for segment %d: ",j);
			scanf("%d",&segmenttable[i][j].baseaddress);
			printf("enter the limit for segment %d: ",j);
			scanf("%d",&segmenttable[i][j].limit);
		}
	}
	int processno,segmentno,offset;
	printf("enter process number:");
	scanf("%d",&processno);
	printf("enter segment number :");
	scanf("%d",&segmentno);
	printf("enter offset : " );
	scanf("%d",&offset);
	int physicaladdress=get_physical_address(segmenttable,processno,segmentno,offset);
if(physicaladdress!=-1)
{
printf("the physical addresss is %d\n",physicaladdress);
}
 else
{
Printf(“invalid processno or segmentno or offset”);
}
	
	return 0;
}

